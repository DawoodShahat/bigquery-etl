{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"BigQuery ETL","title":"BigQuery ETL"},{"location":"#bigquery-etl","text":"","title":"BigQuery ETL"},{"location":"mozfun/bits28/","text":"bits28 The bits28 functions provide an API for working with \"bit pattern\" INT64 fields, as used in the clients_last_seen dataset for desktop Firefox and similar datasets for other applications. A powerful feature of the clients_last_seen methodology is that it doesn't record specific metrics like MAU and WAU directly, but rather each row stores a history of the discrete days on which a client was active in the past 28 days. We could calculate active users in a 10 day or 25 day window just as efficiently as a 7 day (WAU) or 28 day (MAU) window. But we can also define completely new metrics based on these usage histories, such as various retention definitions. The usage history is encoded as a \"bit pattern\" where the physical type of the field is a BigQuery INT64, but logically the integer represents an array of bits, with each 1 indicating a day where the given clients was active and each 0 indicating a day where the client was inactive. from_string Convert a string representing individual bits into an INT64. to_string Convert an INT64 field into a 28-character string representing the individual bits. SELECT [mozfun.bits28.to_string(1), mozfun.bits28.to_string(2), mozfun.bits28.to_string(3)] -- >>> ['0000000000000000000000000001', -- '0000000000000000000000000010', -- '0000000000000000000000000011'] retention Return a nested struct providing booleans indicating whether a given client was active various time periods based on the passed bit pattern. range Return an INT64 representing a range of bits from a source bit pattern. SELECT -- Signature is bits28.range(offset_to_day_0, start_bit, number_of_bits) mozfun.bits28.range(days_seen_bits, -13 + 0, 7) AS week_0_bits, mozfun.bits28.range(days_seen_bits, -13 + 7, 7) AS week_1_bits FROM telemetry.clients_last_seen WHERE submission_date > '2020-01-01' to_dates Convert a bit pattern into an array of the dates is represents. days_since_seen Return the position of the rightmost set bit in an INT64 bit pattern. SELECT mozfun.bits28.days_since_seen(18) -- >> 1 active_in_range Return a boolean indicating if any bits are set in the specified range of a bit pattern.","title":"bits28"},{"location":"mozfun/bits28/#bits28","text":"The bits28 functions provide an API for working with \"bit pattern\" INT64 fields, as used in the clients_last_seen dataset for desktop Firefox and similar datasets for other applications. A powerful feature of the clients_last_seen methodology is that it doesn't record specific metrics like MAU and WAU directly, but rather each row stores a history of the discrete days on which a client was active in the past 28 days. We could calculate active users in a 10 day or 25 day window just as efficiently as a 7 day (WAU) or 28 day (MAU) window. But we can also define completely new metrics based on these usage histories, such as various retention definitions. The usage history is encoded as a \"bit pattern\" where the physical type of the field is a BigQuery INT64, but logically the integer represents an array of bits, with each 1 indicating a day where the given clients was active and each 0 indicating a day where the client was inactive.","title":"bits28"},{"location":"mozfun/bits28/#from_string","text":"Convert a string representing individual bits into an INT64.","title":"from_string"},{"location":"mozfun/bits28/#to_string","text":"Convert an INT64 field into a 28-character string representing the individual bits. SELECT [mozfun.bits28.to_string(1), mozfun.bits28.to_string(2), mozfun.bits28.to_string(3)] -- >>> ['0000000000000000000000000001', -- '0000000000000000000000000010', -- '0000000000000000000000000011']","title":"to_string"},{"location":"mozfun/bits28/#retention","text":"Return a nested struct providing booleans indicating whether a given client was active various time periods based on the passed bit pattern.","title":"retention"},{"location":"mozfun/bits28/#range","text":"Return an INT64 representing a range of bits from a source bit pattern. SELECT -- Signature is bits28.range(offset_to_day_0, start_bit, number_of_bits) mozfun.bits28.range(days_seen_bits, -13 + 0, 7) AS week_0_bits, mozfun.bits28.range(days_seen_bits, -13 + 7, 7) AS week_1_bits FROM telemetry.clients_last_seen WHERE submission_date > '2020-01-01'","title":"range"},{"location":"mozfun/bits28/#to_dates","text":"Convert a bit pattern into an array of the dates is represents.","title":"to_dates"},{"location":"mozfun/bits28/#days_since_seen","text":"Return the position of the rightmost set bit in an INT64 bit pattern. SELECT mozfun.bits28.days_since_seen(18) -- >> 1","title":"days_since_seen"},{"location":"mozfun/bits28/#active_in_range","text":"Return a boolean indicating if any bits are set in the specified range of a bit pattern.","title":"active_in_range"},{"location":"mozfun/hist/","text":"hist Functions for working with string encodings of histograms from desktop telemetry. extract Return a parsed struct from a string-encoded histogram. We support a variety of compact encodings as well as the classic JSON representation as sent in main pings. The built-in BigQuery JSON parsing functions are not powerful enough to handle all the logic here, so we resort to some string processing. This function could behave unexpectedly on poorly-formatted histogram JSON, but we expect that payload validation in the data pipeline should ensure that histograms are well formed, which gives us some flexibility. For more on desktop telemetry histogram structure, see: https://firefox-source-docs.mozilla.org/toolkit/components/telemetry/collection/histograms.html The compact encodings were originally proposed in: https://docs.google.com/document/d/1k_ji_1DB6htgtXnPpMpa7gX0klm-DGV5NMY7KkvVB00/edit# SELECT mozfun.hist.extract( '{\"bucket_count\":3,\"histogram_type\":4,\"sum\":1,\"range\":[1,2],\"values\":{\"0\":1,\"1\":0}}' ).sum -- 1 SELECT mozfun.hist.extract('5').sum -- 5","title":"hist"},{"location":"mozfun/hist/#hist","text":"Functions for working with string encodings of histograms from desktop telemetry.","title":"hist"},{"location":"mozfun/hist/#extract","text":"Return a parsed struct from a string-encoded histogram. We support a variety of compact encodings as well as the classic JSON representation as sent in main pings. The built-in BigQuery JSON parsing functions are not powerful enough to handle all the logic here, so we resort to some string processing. This function could behave unexpectedly on poorly-formatted histogram JSON, but we expect that payload validation in the data pipeline should ensure that histograms are well formed, which gives us some flexibility. For more on desktop telemetry histogram structure, see: https://firefox-source-docs.mozilla.org/toolkit/components/telemetry/collection/histograms.html The compact encodings were originally proposed in: https://docs.google.com/document/d/1k_ji_1DB6htgtXnPpMpa7gX0klm-DGV5NMY7KkvVB00/edit# SELECT mozfun.hist.extract( '{\"bucket_count\":3,\"histogram_type\":4,\"sum\":1,\"range\":[1,2],\"values\":{\"0\":1,\"1\":0}}' ).sum -- 1 SELECT mozfun.hist.extract('5').sum -- 5","title":"extract"},{"location":"mozfun/json/","text":"json Functions for parsing Mozilla-specific JSON data types. extract_int_map Returns an array of key/value structs from a string representing a JSON map. Both keys and values are cast to integers. This is the format for the \"values\" field in the desktop telemetry histogram JSON representation.","title":"json"},{"location":"mozfun/json/#json","text":"Functions for parsing Mozilla-specific JSON data types.","title":"json"},{"location":"mozfun/json/#extract_int_map","text":"Returns an array of key/value structs from a string representing a JSON map. Both keys and values are cast to integers. This is the format for the \"values\" field in the desktop telemetry histogram JSON representation.","title":"extract_int_map"},{"location":"mozfun/map/","text":"map get_key Fetch the value associated with a given key from an array of key/value structs. Because map types aren't available in BigQuery, we model maps as arrays of structs instead, and this function provides map-like access to such fields.","title":"map"},{"location":"mozfun/map/#map","text":"","title":"map"},{"location":"mozfun/map/#get_key","text":"Fetch the value associated with a given key from an array of key/value structs. Because map types aren't available in BigQuery, we model maps as arrays of structs instead, and this function provides map-like access to such fields.","title":"get_key"},{"location":"mozfun/overview/","text":"mozfun mozfun is a public GCP project provisioning publicly accessible user-defined functions (UDFs) and other function-like resources.","title":"mozfun"},{"location":"mozfun/overview/#mozfun","text":"mozfun is a public GCP project provisioning publicly accessible user-defined functions (UDFs) and other function-like resources.","title":"mozfun"}]}